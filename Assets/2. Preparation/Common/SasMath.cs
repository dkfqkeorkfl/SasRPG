using UnityEngine;
using System.Collections;

namespace Sas
{
    public static class Math
    {
        private static readonly float[] sin = 
        { 
        0.0f,0.01745241f,0.0348995f,0.05233596f,0.06975647f,0.08715574f,0.1045285f,0.1218693f,0.1391731f,0.1564345f,
        0.1736482f,0.190809f,0.2079117f,0.224951f,0.2419219f,0.258819f,0.2756374f,0.2923717f,0.309017f,0.3255681f,
        0.3420201f,0.3583679f,0.3746066f,0.3907311f,0.4067366f,0.4226183f,0.4383712f,0.4539905f,0.4694716f,0.4848096f,
        0.5f,0.5150381f,0.5299193f,0.5446391f,0.5591929f,0.5735765f,0.5877852f,0.601815f,0.6156615f,0.6293204f,
        0.6427876f,0.656059f,0.6691306f,0.6819984f,0.6946584f,0.7071068f,0.7193398f,0.7313537f,0.7431449f,0.7547095f,
        0.7660444f,0.7771459f,0.7880107f,0.7986355f,0.809017f,0.8191521f,0.8290375f,0.8386706f,0.8480481f,0.8571673f,
        0.8660254f,0.8746197f,0.8829476f,0.8910065f,0.8987941f,0.9063078f,0.9135455f,0.9205048f,0.9271839f,0.9335804f,
        0.9396926f,0.9455186f,0.9510565f,0.9563047f,0.9612617f,0.9659258f,0.9702957f,0.9743701f,0.9781476f,0.9816272f,
        0.9848077f,0.9876884f,0.9902681f,0.9925461f,0.9945219f,0.9961947f,0.9975641f,0.9986295f,0.9993908f,0.9998477f,
        1.0f,0.9998477f,0.9993908f,0.9986295f,0.9975641f,0.9961947f,0.9945219f,0.9925461f,0.9902681f,0.9876884f,
        0.9848077f,0.9816272f,0.9781476f,0.9743701f,0.9702957f,0.9659258f,0.9612617f,0.9563047f,0.9510565f,0.9455186f,
        0.9396926f,0.9335805f,0.9271839f,0.9205049f,0.9135455f,0.9063078f,0.8987941f,0.8910066f,0.8829476f,0.8746197f,
        0.8660254f,0.8571673f,0.848048f,0.8386706f,0.8290376f,0.819152f,0.809017f,0.7986355f,0.7880108f,0.777146f,
        0.7660444f,0.7547096f,0.7431448f,0.7313537f,0.7193399f,0.7071068f,0.6946585f,0.6819983f,0.6691306f,0.656059f,
        0.6427876f,0.6293205f,0.6156614f,0.6018151f,0.5877852f,0.5735765f,0.559193f,0.5446391f,0.5299193f,0.515038f,
        0.5000001f,0.4848095f,0.4694716f,0.4539906f,0.4383711f,0.4226183f,0.4067366f,0.3907312f,0.3746067f,0.3583679f,
        0.3420202f,0.3255681f,0.309017f,0.2923718f,0.2756374f,0.2588191f,0.2419219f,0.2249511f,0.2079116f,0.190809f,
        0.1736483f,0.1564344f,0.1391732f,0.1218693f,0.1045285f,0.08715588f,0.06975647f,0.05233605f,0.03489945f,0.01745246f,
        -8.742278E-08f,-0.01745239f,-0.03489939f,-0.05233599f,-0.0697564f,-0.08715581f,-0.1045284f,-0.1218692f,-0.1391731f,-0.1564344f,
        -0.1736482f,-0.190809f,-0.2079118f,-0.224951f,-0.2419218f,-0.2588191f,-0.2756373f,-0.2923718f,-0.309017f,-0.3255681f,
        -0.3420202f,-0.3583679f,-0.3746066f,-0.3907311f,-0.4067365f,-0.4226183f,-0.4383711f,-0.4539905f,-0.4694715f,-0.4848097f,
        -0.5f,-0.515038f,-0.5299193f,-0.544639f,-0.559193f,-0.5735764f,-0.5877851f,-0.601815f,-0.6156614f,-0.6293204f,
        -0.6427876f,-0.6560591f,-0.6691306f,-0.6819983f,-0.6946584f,-0.7071067f,-0.7193398f,-0.7313537f,-0.7431448f,-0.7547096f,
        -0.7660446f,-0.777146f,-0.7880107f,-0.7986354f,-0.8090168f,-0.8191521f,-0.8290376f,-0.8386706f,-0.848048f,-0.8571672f,
        -0.8660254f,-0.8746197f,-0.8829476f,-0.8910065f,-0.8987941f,-0.9063078f,-0.9135454f,-0.9205048f,-0.9271838f,-0.9335805f,
        -0.9396927f,-0.9455186f,-0.9510565f,-0.9563047f,-0.9612617f,-0.9659259f,-0.9702957f,-0.9743701f,-0.9781476f,-0.9816272f,
        -0.9848078f,-0.9876883f,-0.9902681f,-0.9925461f,-0.9945219f,-0.9961947f,-0.997564f,-0.9986295f,-0.9993908f,-0.9998477f,
        -1.0f,-0.9998477f,-0.9993908f,-0.9986295f,-0.997564f,-0.9961947f,-0.9945219f,-0.9925462f,-0.9902681f,-0.9876883f,
        -0.9848077f,-0.9816272f,-0.9781476f,-0.97437f,-0.9702957f,-0.9659258f,-0.9612617f,-0.9563048f,-0.9510565f,-0.9455186f,
        -0.9396926f,-0.9335805f,-0.9271839f,-0.9205048f,-0.9135454f,-0.9063078f,-0.8987941f,-0.8910066f,-0.8829476f,-0.8746197f,
        -0.8660254f,-0.8571674f,-0.848048f,-0.8386705f,-0.8290376f,-0.8191521f,-0.8090171f,-0.7986354f,-0.7880107f,-0.777146f,
        -0.7660445f,-0.7547097f,-0.7431448f,-0.7313536f,-0.7193398f,-0.7071069f,-0.6946585f,-0.6819983f,-0.6691306f,-0.6560591f,
        -0.6427878f,-0.6293206f,-0.6156614f,-0.601815f,-0.5877853f,-0.5735766f,-0.5591931f,-0.5446389f,-0.5299193f,-0.5150381f,
        -0.5000002f,-0.4848095f,-0.4694715f,-0.4539905f,-0.4383712f,-0.4226184f,-0.4067365f,-0.3907311f,-0.3746066f,-0.3583681f,
        -0.3420204f,-0.325568f,-0.3090169f,-0.2923717f,-0.2756375f,-0.2588193f,-0.2419218f,-0.224951f,-0.2079118f,-0.1908092f,
        -0.1736484f,-0.1564344f,-0.1391731f,-0.1218694f,-0.1045287f,-0.08715603f,-0.06975638f,-0.05233596f,-0.0348996f,-0.01745261f
        };

        private static readonly float[] cos =
        {
        1.0f, 0.9998477f, 0.9993908f, 0.9986295f, 0.9975641f, 0.9961947f, 0.9945219f, 0.9925461f, 0.9902681f, 0.9876884f,
        0.9848077f, 0.9816272f, 0.9781476f, 0.9743701f, 0.9702957f, 0.9659258f, 0.9612617f, 0.9563048f, 0.9510565f,0.9455186f,
        0.9396926f, 0.9335804f, 0.9271839f, 0.9205049f, 0.9135454f, 0.9063078f, 0.8987941f, 0.8910065f, 0.8829476f,0.8746197f,
        0.8660254f, 0.8571673f, 0.8480481f, 0.8386706f, 0.8290376f, 0.8191521f, 0.809017f, 0.7986355f, 0.7880108f,0.7771459f,
        0.7660444f, 0.7547096f, 0.7431448f, 0.7313537f, 0.7193398f, 0.7071068f, 0.6946584f, 0.6819984f, 0.6691306f,0.656059f,
        0.6427876f, 0.6293204f, 0.6156615f, 0.601815f, 0.5877853f, 0.5735765f, 0.5591929f, 0.5446391f, 0.5299193f,0.5150381f,
        0.5f, 0.4848096f, 0.4694716f, 0.4539905f, 0.4383712f, 0.4226182f, 0.4067366f, 0.3907312f, 0.3746066f, 0.358368f,
        0.3420202f, 0.3255681f, 0.309017f, 0.2923718f, 0.2756374f, 0.2588191f, 0.2419219f, 0.224951f, 0.2079117f,0.1908091f,
        0.1736482f, 0.1564345f, 0.1391731f, 0.1218693f, 0.1045284f, 0.0871558f, 0.06975651f, 0.05233597f, 0.0348995f,0.01745238f,
        -4.371139E-08f, -0.01745235f, -0.03489946f, -0.05233594f, -0.06975648f, -0.08715577f, -0.1045285f, -0.1218693f,-0.1391731f, -0.1564344f,
        -0.1736482f, -0.190809f, -0.2079116f, -0.224951f, -0.2419219f, -0.258819f, -0.2756374f, -0.2923717f, -0.3090169f,-0.3255681f,
        -0.3420201f, -0.3583679f, -0.3746066f, -0.3907312f, -0.4067366f, -0.4226183f, -0.4383711f, -0.4539904f,-0.4694716f, -0.4848095f,
        -0.5000001f, -0.515038f, -0.5299193f, -0.5446391f, -0.5591928f, -0.5735765f, -0.5877852f, -0.6018151f,-0.6156614f, -0.6293203f,
        -0.6427876f, -0.656059f, -0.6691307f, -0.6819983f, -0.6946583f, -0.7071068f, -0.7193397f, -0.7313538f,-0.7431448f, -0.7547097f,
        -0.7660444f, -0.7771459f, -0.7880108f, -0.7986355f, -0.8090171f, -0.8191521f, -0.8290375f, -0.8386706f,-0.848048f, -0.8571673f,
        -0.8660254f, -0.8746198f, -0.8829476f, -0.8910065f, -0.8987941f, -0.9063078f, -0.9135455f, -0.9205049f,-0.9271838f, -0.9335805f,
        -0.9396926f, -0.9455186f, -0.9510565f, -0.9563047f, -0.9612617f, -0.9659258f, -0.9702957f, -0.9743701f,-0.9781476f, -0.9816272f,
        -0.9848077f, -0.9876884f, -0.9902681f, -0.9925461f, -0.9945219f, -0.9961947f, -0.9975641f, -0.9986295f,-0.9993908f, -0.9998477f,
        -1.0f, -0.9998477f, -0.9993908f, -0.9986295f, -0.9975641f, -0.9961947f, -0.9945219f, -0.9925461f, -0.9902681f,-0.9876884f,
        -0.9848077f, -0.9816272f, -0.9781476f, -0.9743701f, -0.9702957f, -0.9659258f, -0.9612617f, -0.9563047f,-0.9510565f, -0.9455186f,
        -0.9396926f, -0.9335805f, -0.9271838f, -0.9205049f, -0.9135455f, -0.9063078f, -0.8987941f, -0.8910065f,-0.8829476f, -0.8746197f,
        -0.8660254f, -0.8571674f, -0.8480481f, -0.8386706f, -0.8290375f, -0.8191521f, -0.8090171f, -0.7986355f,-0.7880108f, -0.7771459f,
        -0.7660445f, -0.7547095f, -0.7431448f, -0.7313538f, -0.7193398f, -0.7071068f, -0.6946583f, -0.6819984f,-0.6691307f, -0.656059f,
        -0.6427875f, -0.6293203f, -0.6156615f, -0.6018152f, -0.5877854f, -0.5735763f, -0.5591929f, -0.5446391f,-0.5299194f, -0.5150383f,
        -0.4999999f, -0.4848096f, -0.4694716f, -0.4539907f, -0.438371f, -0.4226182f, -0.4067366f, -0.3907312f,-0.3746068f, -0.3583678f,
        -0.3420201f, -0.3255682f, -0.3090171f, -0.2923719f, -0.2756372f, -0.258819f, -0.2419219f, -0.2249512f,-0.2079119f, -0.1908088f,
        -0.1736481f, -0.1564345f, -0.1391733f, -0.1218696f, -0.1045283f, -0.08715571f, -0.06975655f, -0.05233612f,-0.03489976f, -0.0174523f,
        1.192488E-08f, 0.01745232f, 0.03489931f, 0.05233615f, 0.06975657f, 0.08715574f, 0.1045284f, 0.1218691f,0.1391733f, 0.1564345f,
        0.1736481f, 0.1908089f, 0.2079115f, 0.2249512f, 0.2419219f, 0.258819f, 0.2756372f, 0.2923715f, 0.3090171f,0.3255682f,
        0.3420201f, 0.3583678f, 0.3746064f, 0.3907312f, 0.4067367f, 0.4226182f, 0.438371f, 0.4539903f, 0.4694717f,0.4848096f,
        0.4999999f, 0.5150379f, 0.5299194f, 0.5446391f, 0.5591929f, 0.5735763f, 0.5877851f, 0.6018152f, 0.6156615f,0.6293204f,
        0.6427875f, 0.6560588f, 0.6691307f, 0.6819984f, 0.6946583f, 0.7071066f, 0.7193396f, 0.7313538f, 0.7431449f,0.7547095f,
        0.7660443f, 0.7771458f, 0.7880108f, 0.7986355f, 0.8090169f, 0.8191519f, 0.8290374f, 0.8386706f, 0.8480481f,0.8571672f,
        0.8660253f, 0.8746198f, 0.8829476f, 0.8910065f, 0.898794f, 0.9063077f, 0.9135455f, 0.9205049f, 0.9271839f,0.9335804f,
        0.9396926f, 0.9455186f, 0.9510565f, 0.9563047f, 0.9612616f, 0.9659258f, 0.9702958f, 0.9743701f, 0.9781476f,0.9816272f,
        0.9848077f, 0.9876884f, 0.9902681f, 0.9925461f, 0.9945219f, 0.9961947f, 0.9975641f, 0.9986295f, 0.9993908f,0.9998477f
        };

        public static float Sin(int degree)
        {
            degree %= 360;
            return sin[Mathf.Abs(degree)] * (degree >= 0 ? 1.0f : -1.0f);
        }

        public static float Cos(int degree)
        {
            degree %= 360;
            return cos[Mathf.Abs(degree)] * (degree >= 0 ? 1.0f : -1.0f);
        }

        public static float Sin(float degree)
        {
            int iDegree = (int)degree;
            float sin1 = Sin(iDegree);
            float sin2 = Sin(iDegree + 1);

            // 소수점에 가중치를 두어 sin2와 sin1의 추정값을 반환한다.
            return sin1 + Mathf.Lerp(sin1, sin2, (degree - iDegree));
        }

        public static float Cos(float degree)
        {
            int iDegree = (int)degree;
            float cos1 = Cos(iDegree);
            float cos2 = Cos(iDegree + 1);
            // 소수점에 가중치를 두어 cos2와 cos1의 추정값을 반환한다.
            return cos1 + Mathf.Lerp(cos1, cos2, (degree - iDegree));
        }

        public static float Factor(float value, float min, float max)
        {
            float scale = max - min;
            float vScale = value - min;
            return vScale / scale;
        }

        public static float ContAngle(Vector3 from, Vector3 to)
        {
            Vector3 origin = from.normalized;
            Vector3 target = to.normalized;

            float angle = Vector3.Angle(origin, target);

            if (AngleDir(origin, target, Vector3.up) == -1)
            {
                angle = 360.0f - angle;
                if (angle > 359.9999f)
                    angle -= 360.0f;
                return angle;
            }
            else
                return angle;
        }

        public static int AngleDir(Vector3 origin, Vector3 target, Vector3 up)
        {
            Vector3 perp = Vector3.Cross(origin, target);
            float dir = Vector3.Dot(perp, up);

            if (dir > 0.0)
                return 1;
            if (dir < 0.0)
                return -1;

            return 0;
        }

    }
}